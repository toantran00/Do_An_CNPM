package vn.iotstar.service.impl;

import java.util.List;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import vn.iotstar.entity.*;
import vn.iotstar.model.DatHangRequest;
import vn.iotstar.repository.DatHangRepository;
import vn.iotstar.repository.DatHangChiTietRepository;
import vn.iotstar.service.*;

@Service
@Transactional
public class DatHangServiceImpl implements DatHangService {
    
    @Autowired
    private DatHangRepository datHangRepository;
    
    @Autowired
    private GioHangService gioHangService;
    
    @Autowired
    private MatHangService matHangService;
    
    @Autowired
    private CuaHangService cuaHangService;
    
    @Autowired
    private KhuyenMaiService khuyenMaiService;
    
    @Autowired
    private SanPhamService sanPhamService;
    
    @Autowired
    private DatHangChiTietRepository datHangChiTietRepository;
    
    @Autowired
    private ThanhToanService thanhToanService;
    
    @Autowired
    @Lazy
    private VanChuyenService vanChuyenService;

    @Override
    public List<DatHang> findAll() {
        return datHangRepository.findAll();
    }

    @Override
    public DatHang findByMaDatHang(Integer maDatHang) {
        return datHangRepository.findById(maDatHang).orElse(null);
    }
    
    /**
     * ƒê·ªìng b·ªô h√≥a tr·∫°ng th√°i v·∫≠n chuy·ªÉn khi ƒë∆°n h√†ng b·ªã h·ªßy
     */
    @Override
    public void syncDeliveryStatusWhenCancelled(Integer maDatHang, String lyDoHuy) {
        // Di chuy·ªÉn logic t·ª´ ph∆∞∆°ng th·ª©c private l√™n ƒë√¢y
        try {
            
            // DEBUG: Ki·ªÉm tra service c√≥ null kh√¥ng
            System.out.println("üî¥ VanChuyenService is null: " + (vanChuyenService == null));
            
            if (vanChuyenService == null) {
                System.err.println("‚ùå L·ªñI: VanChuyenService l√† NULL!");
                return;
            }
            
            // T√¨m b·∫£n ghi v·∫≠n chuy·ªÉn c·ªßa ƒë∆°n h√†ng
            VanChuyen vanChuyen = null;
            try {
                vanChuyen = vanChuyenService.getDeliveryByOrderId(maDatHang);
            } catch (Exception e) {
                System.err.println("‚ùå L·ªói trong getDeliveryByOrderId: " + e.getMessage());
                e.printStackTrace();
                return;
            }
            
            if (vanChuyen != null) {
                
                // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu tr·∫°ng th√°i hi·ªán t·∫°i kh√¥ng ph·∫£i l√† "H·ªßy" ho·∫∑c "Ho√†n th√†nh"
                if (!"H·ªßy".equals(vanChuyen.getTrangThai()) && !"Ho√†n th√†nh".equals(vanChuyen.getTrangThai())) {
                    
                    try {
                        VanChuyen updated = vanChuyenService.updateDeliveryStatus(vanChuyen.getMaVanChuyen(), "H·ªßy", lyDoHuy);
                        
                        // DEBUG: Ki·ªÉm tra l·∫°i t·ª´ database
                        try {
                            VanChuyen check = vanChuyenService.getDeliveryById(vanChuyen.getMaVanChuyen());
                            System.out.println("‚úÖ KI·ªÇM TRA DB - Tr·∫°ng th√°i VC: " + check.getTrangThai());
                        } catch (Exception checkEx) {
                            System.err.println("‚ùå L·ªói khi ki·ªÉm tra DB: " + checkEx.getMessage());
                        }
                        
                    } catch (Exception e) {
                        System.err.println("‚ùå L·ªói trong updateDeliveryStatus: " + e.getMessage());
                        e.printStackTrace();
                    }
                } else {
                    System.out.println("‚ÑπÔ∏è V·∫≠n chuy·ªÉn ƒë√£ ·ªü tr·∫°ng th√°i cu·ªëi: " + vanChuyen.getTrangThai());
                }
            } else {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y b·∫£n ghi v·∫≠n chuy·ªÉn cho ƒë∆°n h√†ng: " + maDatHang);
            }
            
            System.out.println("üî¥ === K·∫æT TH√öC ƒê·ªíNG B·ªò H√ìA ===");
        } catch (Exception e) {
            System.err.println("üí• L·ªñI KHI ƒê·ªíNG B·ªò H√ìA: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @Override
    @Transactional
    public DatHang save(DatHang datHang) {
        try {
            System.out.println("üü¢ === B·∫ÆT ƒê·∫¶U L∆ØU ƒê∆†N H√ÄNG ===");
            System.out.println("üü¢ Order ID: " + datHang.getMaDatHang());
            System.out.println("üü¢ Tr·∫°ng th√°i m·ªõi: " + datHang.getTrangThai());
            
            DatHang existingDatHang = null;
            if (datHang.getMaDatHang() != null) {
                existingDatHang = datHangRepository.findById(datHang.getMaDatHang()).orElse(null);
                if (existingDatHang != null) {
                    System.out.println("üü¢ Tr·∫°ng th√°i c≈©: " + existingDatHang.getTrangThai());
                }
            }
            
            DatHang savedDatHang = datHangRepository.save(datHang);
            System.out.println("‚úÖ ƒê∆°n h√†ng ƒë√£ l∆∞u th√†nh c√¥ng");
            
            // X·ª¨ L√ù ƒê·ªíNG B·ªò H√ìA KHI H·ª¶Y ƒê∆†N H√ÄNG
            if (existingDatHang != null && 
                !"H·ªßy".equals(existingDatHang.getTrangThai()) && 
                "H·ªßy".equals(savedDatHang.getTrangThai())) {
                
                System.out.println("üö® === K√çCH HO·∫†T ƒê·ªíNG B·ªò T·ª™ SAVE ===");
                // ƒê·ªìng b·ªô h√≥a tr·∫°ng th√°i v·∫≠n chuy·ªÉn
                syncDeliveryStatusWhenCancelled(savedDatHang.getMaDatHang(), savedDatHang.getLyDoHuy());
            }
            
            System.out.println("üü¢ === K·∫æT TH√öC L∆ØU ƒê∆†N H√ÄNG ===");
            return savedDatHang;
        } catch (Exception e) {
            System.err.println("üí• L·ªói khi l∆∞u ƒë∆°n h√†ng: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("L·ªói khi l∆∞u ƒë∆°n h√†ng: " + e.getMessage(), e);
        }
    }
    
    @Transactional(rollbackFor = Exception.class)
    public DatHang updateOrderStatus(Integer maDatHang, String newStatus) {
        try {
            System.out.println("=== UPDATE ORDER STATUS METHOD STARTED ===");
            System.out.println("Order ID: " + maDatHang);
            System.out.println("New Status: " + newStatus);
            
            DatHang datHang = datHangRepository.findById(maDatHang)
                    .orElseThrow(() -> new RuntimeException("ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i"));
            
            String oldStatus = datHang.getTrangThai();
            System.out.println("Old Status: " + oldStatus);
            
            datHang.setTrangThai(newStatus);
            
            DatHang savedDatHang = datHangRepository.save(datHang);
            System.out.println("Order saved with new status");
            
            // X·ª¨ L√ù ƒê·ªíNG B·ªò H√ìA KHI H·ª¶Y ƒê∆†N H√ÄNG
            if (!"H·ªßy".equals(oldStatus) && "H·ªßy".equals(newStatus)) {
                System.out.println("=== TRIGGERING SYNC FROM UPDATE STATUS METHOD ===");
                syncDeliveryStatusWhenCancelled(maDatHang, datHang.getLyDoHuy());
                
                // TH√äM: C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n khi h·ªßy
                updatePaymentStatusToCancelled(maDatHang);
            }
            
            // X·ª≠ l√Ω c·∫≠p nh·∫≠t thanh to√°n n·∫øu c·∫ßn
            if (!"Ho√†n th√†nh".equals(oldStatus) && "Ho√†n th√†nh".equals(newStatus)) {
                System.out.println("Triggering payment update for completed order");
                updatePaymentStatusToCompleted(maDatHang);
            }
            
            System.out.println("=== UPDATE ORDER STATUS METHOD COMPLETED ===");
            return savedDatHang;
        } catch (Exception e) {
            System.err.println("Error in updateOrderStatus: " + e.getMessage());
            e.printStackTrace();
            throw new RuntimeException("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng: " + e.getMessage(), e);
        }
    }
    
    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫•t c·∫£ thanh to√°n c·ªßa ƒë∆°n h√†ng sang "cancelled"
     */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    private void updatePaymentStatusToCancelled(Integer maDatHang) {
        try {
            System.out.println("Updating payment status to CANCELLED for order: " + maDatHang);
            List<ThanhToan> thanhToans = thanhToanService.findByDatHang(maDatHang);
            System.out.println("Found " + thanhToans.size() + " payment records");
            
            for (ThanhToan thanhToan : thanhToans) {
                thanhToan.setTrangThai("cancelled");
                thanhToanService.save(thanhToan);
            }
            System.out.println("‚úì ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n sang 'cancelled' cho ƒë∆°n h√†ng: " + maDatHang);
        } catch (Exception e) {
            System.err.println("‚úó L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n sang cancelled: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫•t c·∫£ thanh to√°n c·ªßa ƒë∆°n h√†ng sang "completed"
     */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    private void updatePaymentStatusToCompleted(Integer maDatHang) {
        try {
            System.out.println("Updating payment status for order: " + maDatHang);
            List<ThanhToan> thanhToans = thanhToanService.findByDatHang(maDatHang);
            System.out.println("Found " + thanhToans.size() + " payment records");
            
            for (ThanhToan thanhToan : thanhToans) {
                thanhToan.setTrangThai("ƒê√£ thanh to√°n");
                thanhToanService.save(thanhToan);
            }
            System.out.println("‚úì ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n sang 'ƒê√£ thanh to√°n' cho ƒë∆°n h√†ng: " + maDatHang);
        } catch (Exception e) {
            System.err.println("‚úó L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @Override
    public List<DatHang> findRecentOrders(int limit) {
        return datHangRepository.findTop5ByOrderByNgayDatDesc();
    }

    @Override
    public long countAllOrders() {
        return datHangRepository.count();
    }

    @Override
    public long countByCuaHangAndTrangThai(CuaHang cuaHang, String trangThai) {
        return datHangRepository.countByCuaHangAndTrangThai(cuaHang, trangThai);
    }

    @Override
    public List<DatHang> findRecentOrdersByCuaHangAndTrangThai(CuaHang cuaHang, String trangThai, int limit) {
        Pageable pageable = PageRequest.of(0, limit, Sort.by(Sort.Direction.DESC, "ngayDat"));
        return datHangRepository.findByCuaHangAndTrangThai(cuaHang, trangThai, pageable);
    }

    @Override
    @Transactional
    public DatHang datHang(NguoiDung nguoiDung, DatHangRequest datHangRequest) {
        // L·∫•y gi·ªè h√†ng
        GioHang gioHang = gioHangService.findByNguoiDung(nguoiDung);
        if (gioHang == null) {
            throw new RuntimeException("Gi·ªè h√†ng tr·ªëng");
        }

        // L·∫•y danh s√°ch m·∫∑t h√†ng
        List<MatHang> matHangs = matHangService.findByGioHang(gioHang);
        if (matHangs.isEmpty()) {
            throw new RuntimeException("Gi·ªè h√†ng tr·ªëng");
        }

        // T·∫°o ƒë∆°n h√†ng m·ªõi v·ªõi th√¥ng tin m·ªõi
        DatHang datHang = DatHang.builder()
                .nguoiDung(nguoiDung)
                .ngayDat(LocalDate.now())
                .trangThai("Ch·ªù x√°c nh·∫≠n")
                .tongTien(BigDecimal.ZERO)
                .diaChiGiaoHang(datHangRequest.getDiaChiGiaoHang())
                .soDienThoaiGiaoHang(datHangRequest.getSoDienThoai())
                .ghiChu(datHangRequest.getGhiChu())
                .build();
        
        // L∆∞u th√¥ng tin khuy·∫øn m√£i ƒë√£ ch·ªçn (n·∫øu c√≥)
        if (datHangRequest.getSelectedPromotions() != null && !datHangRequest.getSelectedPromotions().isEmpty()) {
            // L∆∞u khuy·∫øn m√£i ƒë·∫ßu ti√™n (c√≥ th·ªÉ m·ªü r·ªông ƒë·ªÉ l∆∞u nhi·ªÅu khuy·∫øn m√£i)
            Integer firstPromoId = datHangRequest.getSelectedPromotions().values().iterator().next();
            if (firstPromoId != null) {
                KhuyenMai khuyenMai = khuyenMaiService.findByMaKhuyenMai(firstPromoId);
                datHang.setKhuyenMai(khuyenMai);
            }
        }

        // L∆∞u ƒë∆°n h√†ng ƒë·ªÉ c√≥ m√£
        datHang = datHangRepository.save(datHang);

        BigDecimal tongTien = BigDecimal.ZERO;
        Map<CuaHang, BigDecimal> discountByStore = new HashMap<>();

        // T√≠nh to√°n gi·∫£m gi√° theo c·ª≠a h√†ng
        if (datHangRequest.getSelectedPromotions() != null) {
            for (Map.Entry<Integer, Integer> entry : datHangRequest.getSelectedPromotions().entrySet()) {
                Integer maCuaHang = entry.getKey();
                Integer maKhuyenMai = entry.getValue();
                
                if (maKhuyenMai != null) {
                    KhuyenMai khuyenMai = khuyenMaiService.findByMaKhuyenMai(maKhuyenMai);
                    if (khuyenMai != null && khuyenMai.isActive()) {
                        // T√≠nh t·ªïng ti·ªÅn c·ªßa c·ª≠a h√†ng n√†y
                        BigDecimal storeTotal = matHangs.stream()
                                .filter(mh -> mh.getSanPham().getCuaHang().getMaCuaHang().equals(maCuaHang))
                                .map(mh -> mh.getSanPham().getGiaBan().multiply(BigDecimal.valueOf(mh.getSoLuongDat())))
                                .reduce(BigDecimal.ZERO, BigDecimal::add);
                        
                        // T√≠nh s·ªë ti·ªÅn gi·∫£m gi√°
                        BigDecimal discountAmount = storeTotal.multiply(khuyenMai.getDiscount())
                                .divide(BigDecimal.valueOf(100));
                        
                        discountByStore.put(khuyenMai.getCuaHang(), discountAmount);
                    }
                }
            }
        }

        // T·∫°o chi ti·∫øt ƒë∆°n h√†ng v√† c·∫≠p nh·∫≠t t·ªìn kho
        for (MatHang matHang : matHangs) {
            SanPham sanPham = matHang.getSanPham();
            
            // Ki·ªÉm tra t·ªìn kho
            if (sanPham.getSoLuongConLai() < matHang.getSoLuongDat()) {
                throw new RuntimeException("S·∫£n ph·∫©m " + sanPham.getTenSanPham() + " kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng t·ªìn kho");
            }

            // T√≠nh th√†nh ti·ªÅn
            BigDecimal thanhTien = sanPham.getGiaBan().multiply(BigDecimal.valueOf(matHang.getSoLuongDat()));
            
            // √Åp d·ª•ng gi·∫£m gi√° n·∫øu c√≥
            CuaHang cuaHang = sanPham.getCuaHang();
            if (discountByStore.containsKey(cuaHang)) {
                // T√≠nh ph·∫ßn gi·∫£m gi√° cho s·∫£n ph·∫©m n√†y (t·ª∑ l·ªá theo gi√° tr·ªã)
                BigDecimal storeTotalForDiscount = matHangs.stream()
                        .filter(mh -> mh.getSanPham().getCuaHang().equals(cuaHang))
                        .map(mh -> mh.getSanPham().getGiaBan().multiply(BigDecimal.valueOf(mh.getSoLuongDat())))
                        .reduce(BigDecimal.ZERO, BigDecimal::add);
                
                if (storeTotalForDiscount.compareTo(BigDecimal.ZERO) > 0) {
                    BigDecimal productRatio = thanhTien.divide(storeTotalForDiscount, 4, BigDecimal.ROUND_HALF_UP);
                    BigDecimal productDiscount = discountByStore.get(cuaHang).multiply(productRatio);
                    thanhTien = thanhTien.subtract(productDiscount);
                }
            }

            // T·∫°o chi ti·∫øt ƒë∆°n h√†ng
            DatHangChiTiet chiTiet = DatHangChiTiet.builder()
                    .datHang(datHang)
                    .sanPham(sanPham)
                    .soLuong(matHang.getSoLuongDat())
                    .giaBan(sanPham.getGiaBan())
                    .thanhTien(thanhTien)
                    .build();

            datHangChiTietRepository.save(chiTiet);

            // C·∫≠p nh·∫≠t t·ªìn kho
            //sanPham.setSoLuongConLai(sanPham.getSoLuongConLai() - matHang.getSoLuongDat());
            //sanPhamService.save(sanPham);

            tongTien = tongTien.add(thanhTien);
        }
 
        // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ƒë∆°n h√†ng
        datHang.setTongTien(tongTien);
        return datHangRepository.save(datHang);
    }
    
    @Override
    public List<DatHang> findByNguoiDung(Integer maNguoiDung) {
        return datHangRepository.findByNguoiDung_MaNguoiDung(maNguoiDung);
    }
    
    @Override
    public Page<DatHang> findByCuaHangAndFilters(
            CuaHang cuaHang, 
            String keyword, 
            LocalDate startDate, 
            LocalDate endDate,
            String trangThai,
            Pageable pageable) {
        
        return datHangRepository.findByCuaHangAndFilters(
            cuaHang, keyword, startDate, endDate, trangThai, pageable);
    }
    
    @Override
    public List<DatHang> findByCuaHang(CuaHang cuaHang) {
        return datHangRepository.findByCuaHang(cuaHang);
    }
    
    @Override
    public void deleteDatHang(Integer maDatHang) {
        DatHang datHang = datHangRepository.findById(maDatHang)
                .orElseThrow(() -> new RuntimeException("ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i"));
        datHangRepository.delete(datHang);
    }
    
    public Page<DatHangChiTiet> findCompletedOrderDetailsByCuaHang(
            CuaHang cuaHang, String keyword, LocalDate startDate, 
            LocalDate endDate, String productName, Pageable pageable) {
        return datHangChiTietRepository.findCompletedOrderDetailsByCuaHang(
            cuaHang, keyword, startDate, endDate, productName, "H·ªßy", pageable);
    }

    @Override
    public Double getTotalRevenueByCuaHangAndDateRange(
            CuaHang cuaHang, 
            String trangThai, 
            LocalDate startDate, 
            LocalDate endDate) {
        
        return datHangChiTietRepository.getTotalRevenueByCuaHangAndDateRange(
            cuaHang, trangThai, startDate, endDate);
    }

    @Override
    public Long getTotalProductsSoldByCuaHang(
            CuaHang cuaHang, 
            String trangThai, 
            LocalDate startDate, 
            LocalDate endDate) {
        
        return datHangChiTietRepository.getTotalProductsSoldByCuaHang(
            cuaHang, trangThai, startDate, endDate);
    }
    
    @Override
    public Map<LocalDate, DailyRevenueStats> getDailyRevenueStatsByDateRange(
            CuaHang cuaHang, LocalDate startDate, LocalDate endDate) {
        
        List<Object[]> results = datHangChiTietRepository.getDailyRevenueStatsByCuaHangAndDateRange(
            cuaHang, startDate, endDate);
        
        Map<LocalDate, DailyRevenueStats> statsMap = new HashMap<>();
        
        for (Object[] result : results) {
            LocalDate date = (LocalDate) result[0];
            Double revenue = ((Number) result[1]).doubleValue();
            Long orderCount = ((Number) result[2]).longValue();
            Long productCount = ((Number) result[3]).longValue();
            
            statsMap.put(date, new DailyRevenueStats(revenue, orderCount, productCount));
        }
        
        // ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c ng√†y trong kho·∫£ng ƒë·ªÅu c√≥ d·ªØ li·ªáu
        LocalDate current = startDate;
        while (!current.isAfter(endDate)) {
            statsMap.putIfAbsent(current, new DailyRevenueStats(0.0, 0L, 0L));
            current = current.plusDays(1);
        }
        
        return statsMap;
    }
    
    @Override
    public List<DatHang> findByCuaHangAndTrangThai(CuaHang cuaHang, String trangThai, Pageable pageable) {
        return datHangRepository.findByCuaHangAndTrangThai(cuaHang, trangThai, pageable);
    }
    
    @Override
    public Page<DatHang> findAllOrdersWithFilters(
        String keyword, 
        LocalDate startDate, 
        LocalDate endDate,
        String trangThai,
        Integer maCuaHang,
        Pageable pageable) {
        
        return datHangRepository.findAllOrdersWithFilters(
            keyword, startDate, endDate, trangThai, maCuaHang, pageable);
    }
    
    @Override
    public Page<DatHangChiTiet> findCompletedOrderDetails(
            Integer maCuaHang, 
            String keyword, 
            LocalDate startDate, 
            LocalDate endDate,
            String productName,
            Pageable pageable) {
        
        if (maCuaHang != null) {
            CuaHang cuaHang = cuaHangService.findByMaCuaHang(maCuaHang);
            return datHangChiTietRepository.findCompletedOrderDetailsByCuaHang(
                cuaHang, keyword, startDate, endDate, productName, "H·ªßy", pageable);
        } else {
            // L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng ho√†n th√†nh c·ªßa t·∫•t c·∫£ c·ª≠a h√†ng
            return datHangChiTietRepository.findCompletedOrderDetails(
                keyword, startDate, endDate, productName, "H·ªßy", pageable);
        }
    }
    
    @Override
    public Page<DatHang> findByNguoiDungWithPagination(Integer maNguoiDung, Pageable pageable) {
        return datHangRepository.findByNguoiDung_MaNguoiDung(maNguoiDung, pageable);
    }
    
    @Override
    public List<DatHang> findByNguoiDung(NguoiDung nguoiDung) {
        return datHangRepository.findByNguoiDungOrderByNgayDatDesc(nguoiDung);
    }
    
    @Override
    public Page<DatHang> findByNguoiDung(NguoiDung nguoiDung, Pageable pageable) {
        return datHangRepository.findByNguoiDung(nguoiDung, pageable);
    }
}